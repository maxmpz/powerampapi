plugins {
    alias libs.plugins.agp.application apply false
    alias libs.plugins.agp.library apply false
    alias libs.plugins.kotlin.android apply false
}

allprojects {
    ext {
        if(!project.hasProperty('COMPILE_SDK')) COMPILE_SDK = 36
        if(!project.hasProperty('MIN_SDK')) MIN_SDK = 21
        if(!project.hasProperty('TARGET_SDK')) TARGET_SDK = 35
        if(!project.hasProperty('BUILD_TOOLS_VERSION')) BUILD_TOOLS_VERSION = "36.0.0"
        if(!project.hasProperty('JAVA_SOURCE_COMPATIBILITY')) JAVA_SOURCE_COMPATIBILITY = JavaVersion.VERSION_17
        if(!project.hasProperty('JAVA_TARGET_COMPATIBILITY')) JAVA_TARGET_COMPATIBILITY = JavaVersion.VERSION_17
        if(!project.hasProperty('KOTLIN_JVM_TARGET_COMPATIBILITY')) KOTLIN_JVM_TARGET_COMPATIBILITY = org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17
        if(!project.hasProperty('KOTLIN_COMPILER_ARGS')) KOTLIN_COMPILER_ARGS = [
            "-Xbackend-threads=0", // =0 - threads = num of cpus
            "-opt-in=kotlin.RequiresOptIn",
            "-opt-in=kotlin.contracts.ExperimentalContracts",
            "-Xjvm-default=all",

            // Generate smaller bytecode by not generating runtime not-null assertions.
            "-Xno-call-assertions",
            "-Xno-param-assertions",
            "-Xno-receiver-assertions",

            "-Xcontext-receivers",
        ]
    }

    repositories {
        google()
        mavenCentral()
    }
}

subprojects {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlin {
            compilerOptions {
                freeCompilerArgs = KOTLIN_COMPILER_ARGS
                jvmTarget = KOTLIN_JVM_TARGET_COMPATIBILITY
            }
        }
    }
}